apiVersion: v1
kind: Template
metadata:
  name: spark-submitter
  annotations:
    description: "A generic spark job submitter"
    tags: "networking,spark"

parameters:
  - name: IMAGE
    value: "spark-submitter"
    description: HAS Spark Submitter Docker image
    required: true
  - name: NAME
    description: Service name. Make sure the Namespace exists or you will not be able to see the service.
    required: true
  - name: SUBMIT_ARGS
    description: Spark Submit arguments
    required: true

objects:

  - apiVersion: v1
    kind: Service
    metadata:
      name: ${NAME}
      labels:
        app: ${NAME}
    spec:
      selector:
        app: ${NAME}
      ports:
        - name: driver-console-port
          protocol: TCP
          port: 4040
          targetPort: 4040
        - name: spark-driver-port
          protocol: TCP
          port: 51000
          targetPort: 51000
        - name: spark-fileserver-port
          protocol: TCP
          port: 51100
          targetPort: 51100
        - name: spark-broadcast-port
          protocol: TCP
          port: 51200
          targetPort: 51200
        - name: spark-replclassserver-port
          protocol: TCP
          port: 51300
          targetPort: 51300
        - name: spark-blockmanager-port
          protocol: TCP
          port: 51400
          targetPort: 51400
        - name: spark-executor-port
          protocol: TCP
          port: 51500
          targetPort: 51500

  - apiVersion: v1
    kind: Route
    metadata:
      name: ${NAME}
      labels:
        app: ${NAME}
    spec:
      to:
          kind: Service
          name: ${NAME}
          weight: 100
      port:
          targetPort: driver-console-port
      wildcardPolicy: None

  - apiVersion: batch/v1
    kind: Job
    metadata:
      name: ${NAME}
      labels:
        app: ${NAME}
    spec:
      activeDeadlineSeconds: 60
      template:
        metadata:
          labels:
            app: ${NAME}
            type: "driver"
          annotations:
            scheduler.alpha.kubernetes.io/affinity: >
                {
                  "podAntiAffinity": {
                    "requiredDuringSchedulingIgnoredDuringExecution": [{
                        "labelSelector": {
                          "matchExpressions": [{
                            "key": "type",
                            "operator": "In",
                            "values": ["worker", "master", "aux"]
                          }]
                        },
                      "topologyKey": "kubernetes.io/hostname"
                    }]
                  }
                }
        spec:
          containers:
          - name: ${NAME}
            image: ${IMAGE}
            args:
            - ${SUBMIT_ARGS}
            ports:
            - containerPort: 4040
          restartPolicy: Never
