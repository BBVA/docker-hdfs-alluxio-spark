apiVersion: v1
kind: Template
metadata:
  name: alluxio-master
  annotations:
    description: Alluxio cluster
    tags: networking,storage

parameters:
  - name: IMAGE
    value: "alluxio"
    description: HAS Alluxio Docker image
    required: true
  - name: ALLUXIO_WORKER_MEMORY_SIZE
    required: true

objects:

  - apiVersion: v1
    kind: Service
    metadata:
      name: alluxio-master
    spec:
      selector:
        app: "alluxio-master"
      ports:
        - name: alluxio-master-ui
          protocol: TCP
          port: 19999
          targetPort: 19999
        - name: alluxio-master-service
          protocol: TCP
          port: 19998
          targetPort: 19998
        - name: alluxio-master-rest
          protocol: TCP
          port: 39999
          targetPort: 39999

  - apiVersion: v1
    kind: Route
    metadata:
      name: alluxio-master-dashboard
      namespace: has
    spec:
      to:
          kind: Service
          name: alluxio-master
          weight: 100
      port:
          targetPort: alluxio-master-ui
      wildcardPolicy: None

  - apiVersion: v1
    kind: Route
    metadata:
      name: alluxio-master-rest
      namespace: has
    spec:
      to:
          kind: Service
          name: alluxio-master
          weight: 100
      port:
          targetPort: alluxio-master-rest
      wildcardPolicy: None

  - apiVersion: v1
    kind: DeploymentConfig
    metadata:
      name: alluxio-master
      namespace: has
      labels:
        app: alluxio-master
    spec:
      strategy:
        type: Recreate
      triggers:
        - type: ConfigChange
        - type: ImageChange
          imageChangeParams:
            automatic: true
            containerNames:
              - alluxio-master
            from:
              kind: ImageStreamTag
              namespace: has
              name: 'alluxio:latest'
      replicas: 1
      test: false
      selector:
        app: alluxio-master
        deploymentconfig: alluxio-master
      template:
        metadata:
          labels:
            app: alluxio-master
            deploymentconfig: alluxio-master
            type: "master"
          annotations:
            scheduler.alpha.kubernetes.io/affinity: >
                {
                  "podAffinity": {
                    "preferredDuringSchedulingIgnoredDuringExecution": [{
                      "weight": 1,
                      "podAffinityTerm": {
                        "labelSelector": {
                          "matchExpressions": [{
                            "key": "type",
                            "operator": "In",
                            "values": ["master"]
                          }]
                        },
                        "topologyKey": "kubernetes.io/hostname"
                      }
                    }]
                  },
                  "podAntiAffinity": {
                    "requiredDuringSchedulingIgnoredDuringExecution": [{
                        "labelSelector": {
                          "matchExpressions": [{
                            "key": "type",
                            "operator": "In",
                            "values": ["worker", "aux"]
                          }]
                        },
                      "topologyKey": "kubernetes.io/hostname"
                    }]
                  }
                }
        spec:
          hostname: alluxio-master
          volumes:
            - name: alluxio-master-storage
              emptyDir: {}
          containers:
            - name: alluxio-master
              image: ${IMAGE}
              resources: {}
              env:
                - name: ALLUXIO_WORKER_MEMORY_SIZE
                  value: "${ALLUXIO_WORKER_MEMORY_SIZE}"
              args:
                - master
                - start
                - alluxio-master
              volumeMounts:
                - name: alluxio-master-storage
                  mountPath: /data
              terminationMessagePath: /dev/termination-log
              imagePullPolicy: Always
              livenessProbe:
                # an http probe
                httpGet:
                  path: /
                  port: 19999
                  initialDelaySeconds: 15
                  timeoutSeconds: 1
          restartPolicy: Always
          terminationGracePeriodSeconds: 30
          dnsPolicy: ClusterFirst
          securityContext: {}

